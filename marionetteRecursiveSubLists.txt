1
Marionette Recursive Sublists
marionette, JS, javascript, backbone


This code is not original and is taken directly from http://jsfiddle.net/derickbailey/AdWjU/ But the example is so awesome, I just wanted to make sure I had a copy of my own

#HTML
```html
<script id="node-template" type="text/template">
    <li><%= nodeName %></li>
</script>
        
<div id="tree">
</div>
```

#JS
```js
treeData = [
  {
    nodeName: "top level 1",
    nodes: [
      {
        nodeName: "2nd level, item 1",
        nodes: [
          { nodeName: "3rd level, item 1" },
          { nodeName: "3rd level, item 2" },
          { nodeName: "3rd level, item 3" }
        ]
      },
      {
        nodeName: "2nd level, item 2",
        nodes: [
          { nodeName: "3rd level, item 4" },
          { 
              nodeName: "3rd level, item 5",
              nodes: [
                  { nodeName: "4th level, item 1" },
                  { nodeName: "4th level, item 2" },
                  { nodeName: "4th level, item 3" }
              ]
          },
          { nodeName: "3rd level, item 6" }
        ]
      }
    ]
  },
  {
    nodeName: "top level 2",
    nodes: [
      {
        nodeName: "2nd level, item 3",
        nodes: [
          { nodeName: "3rd level, item 7" },
          { nodeName: "3rd level, item 8" },
          { nodeName: "3rd level, item 9" }
        ]
      },
      {
        nodeName: "2nd level, item 4",
        nodes: [
          { nodeName: "3rd level, item 10" },
          { nodeName: "3rd level, item 11" },
          { nodeName: "3rd level, item 12" }
        ]
      }
    ]
  }

];

// The recursive tree view
var TreeView = Backbone.Marionette.CompositeView.extend({
    template: "#node-template",
    
    tagName: "ul",
    
    initialize: function(){
        // grab the child collection from the parent model
        // so that we can render the collection as children
        // of this parent node
        this.collection = this.model.nodes;
    },
    
    appendHtml: function(collectionView, itemView){
        // ensure we nest the child list inside of 
        // the current list item
        console.log(itemView.el);
        console.log(collectionView);
        collectionView.$("li:first").append(itemView.el);
    }
});



TreeNode = Backbone.Model.extend({
    initialize: function(){
        var nodes = this.get("nodes");
        if (nodes){
            this.nodes = new TreeNodeCollection(nodes);
            this.unset("nodes");
        }
    }        
});

TreeNodeCollection = Backbone.Collection.extend({
    model: TreeNode
});
var tree = new TreeNodeCollection(treeData);


// The tree's root: a simple collection view that renders 
// a recursive tree structure for each item in the collection
var TreeRoot = Backbone.Marionette.CollectionView.extend({
    itemView: TreeView,
    //collection: tree
});

console.log(tree);

var treeView = new TreeRoot({
    collection: tree
});

treeView.render();
$("#tree").html(treeView.el);
```

#CSS
```css
ul {
  list-style: disc;
  padding-left: 10px;
  margin-left: 10px;    
}
```
